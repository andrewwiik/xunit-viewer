{"version":3,"sources":["app/logo.js","app/hero.js","app/parse.js","app/parse-all.js","app/toggle.js","app/properties-options.js","app/reducer.js","app/suite.js","app/suite-options.js","app/test-options.js","app/app.js","index.js","cli/parse.js"],"names":["className","width","height","viewBox","fill","xmlns","d","fillRule","clipRule","FilterIcon","active","onClick","title","brand","alt","src","require","parse","window","dispatch","files","suites","a","file","contents","parsed","merge","recursive","console","log","message","type","payload","onIcon","offIcon","onLabel","offLabel","disabled","onChange","Search","label","evt","value","target","placeholder","Total","count","total","EyeIcon","EyeSlashIcon","ChevronUpIcon","ChevronDownIcon","ToggleRow","propertiesVisible","propertiesExpanded","all","tests","toggleAllProperties","state","update","toggleType","suiteTesttoggleType","Object","values","currentSuites","forEach","suite","properties","test","status","testToggles","visible","expanded","raw","suitesExpanded","suitesEmpty","_visible","keys","length","filter","prop","name","id","fuzzy","toLowerCase","some","messages","entries","key","concat","_active","menuActive","suiteOptionsActive","testOptionsActive","propertiesOptionsActive","activeFiles","passed","failure","error","skipped","unknown","icons","Properties","map","join","RawContent","index","PrettyContent","dangerouslySetInnerHTML","__html","PrettyIcon","CodeIcon","Test","time","classname","hasProperties","hasMessage","aria-hidden","SuiteCount","Suite","systemOut","hasTests","containsSomething","sort","b","Date","JSON","start","err","includes","HideIcon","ShowIcon","icon","fromTestCounts","testCounts","StatusTotal","Options","App","useReducer","reducer","initialState","parseAll","currentPropertiesCount","propertiesTotal","testCount","testTotal","onUpdate","sockets","useEffect","io","on","LZUTF8","decompress","inputEncoding","ReactDOM","render","document","getElementById","xml2js","parseString","xml","Promise","resolve","reject","result","Error","hashCode","str","hash","i","charCodeAt","extractProperties","property","trim","push","meta","$","_","extractTests","output","testcases","counter","testcase","class","clonedMeta","assign","body","is_","is$Message","is$Type","isString","extractTestMessages","testsuite","extractSuite","testsuites","Array","isArray","extarctSuiteMeta","extractSystemOut","extract","module","exports"],"mappings":"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","file":"static/js/main.ea8ee335.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => <svg className='logo' width='64' height='64' viewBox='0 0 64 64' fill='none' xmlns='http://www.w3.org/2000/svg'>\n  <rect width='64' height='64' fill='#2C3E50' />\n  <path d='M19.0625 28.9688L24.5156 20.25H28.0469L20.8594 31.5312L28.2188 43H24.6562L19.0625 34.125L13.4375 43H9.89062L17.2656 31.5312L10.0625 20.25H13.5781L19.0625 28.9688Z' fill='#0DBF1F' />\n  <path d='M42.4344 39.0156L48.9344 20.25H52.2156L43.7781 43H41.1219L32.7 20.25H35.9656L42.4344 39.0156Z' fill='#B32010' />\n  <path fillRule='evenodd' clipRule='evenodd' d='M0 64L4 60V4H60L64 0H4H0V4V64Z' fill='#0DBF1F' />\n  <path fillRule='evenodd' clipRule='evenodd' d='M0 64H60H64V60V0L60 4V60H4L0 64Z' fill='#B32010' />\n</svg>\n","import React from 'react'\nimport Logo from './logo'\n\nconst FilterIcon = () => <i className='fas fa-filter' />\n\nexport default ({ active, onClick, title, brand }) => <section className='hero is-black'>\n  <div className='container'>\n    <div className='columns is-mobile'>\n      <div className='column is-1'>\n        <button className='filter button has-text-white' onClick={onClick}>\n          <span><FilterIcon /> {!active ? 'FILTER' : 'CLOSE'}</span>\n        </button>\n      </div>\n      <div className='column is-11'>\n        <div className='hero-center'>\n          {\n            brand !== null\n              ? <img className='brand' alt={title} src={brand} />\n              : <Logo />\n          }\n          <h1 className='title'>{title}</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","require('../cli/parse')\nconst parse = window.parse\nexport default parse\n","import merge from 'merge'\nimport parse from './parse'\n\nexport default async (dispatch, files, suites) => {\n  for (const { file, contents } of files) {\n    try {\n      const parsed = await parse(contents)\n      suites = merge.recursive(true, suites, parsed)\n    } catch (err) {\n      console.log('Failed to parse', file, '\\n', err.message)\n    }\n  }\n  dispatch({\n    type: 'parse-suites',\n    payload: {\n      suites: suites.suites\n    }\n  })\n}\n","import React from 'react'\n\nexport default ({\n  active,\n  onIcon,\n  offIcon,\n  onLabel,\n  offLabel,\n  disabled = false,\n  onChange = () => {},\n  className = ''\n}) => {\n  return <button\n    onClick={() => {\n      onChange(!active)\n    }}\n    disabled={disabled}\n    className={`button toggle is-${active ? 'active' : 'inactive'} ${className}`}>\n    <div className='toggle-rail'>\n      <div className='toggle-handle' />\n    </div>\n    {active ? onIcon : offIcon}\n    <span>{active ? onLabel : offLabel}</span>\n  </button>\n}\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst Search = ({ label, dispatch }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-properties',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total }) => <div className='options-total'>\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst EyeIcon = () => <span className='icon'>\n  <i className='fas fa-eye' />\n</span>\n\nconst EyeSlashIcon = () => <span className='icon'>\n  <i className='fas fa-eye-slash' />\n</span>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst ToggleRow = ({ type, label, propertiesVisible, propertiesExpanded, dispatch }) => <div>\n  <div className='properties-options-toggle-label'>\n    <span>{label}</span>\n  </div>\n  <Toggle\n    className='properties-options-toggle'\n    active={propertiesVisible[type]}\n    onChange={() => {\n      dispatch({\n        type: 'toggle-properties-visbility',\n        payload: {\n          type,\n          active: !propertiesVisible[type]\n        }\n      })\n    }}\n    onLabel='Visible'\n    offLabel='Hidden'\n    onIcon={<EyeIcon />}\n    offIcon={<EyeSlashIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-all-properties',\n        payload: {\n          type,\n          active: !propertiesExpanded[type]\n        }\n      })\n    }}\n    className='properties-options-toggle'\n    active={propertiesExpanded[type]}\n    onLabel='Expanded'\n    offLabel='Contracted'\n    offIcon={<ChevronUpIcon />}\n    onIcon={<ChevronDownIcon />} />\n</div>\n\nexport default ({ count = 0, total = 0, active = false, dispatch, propertiesExpanded = { all: true, suites: true, tests: true }, propertiesVisible = { all: true, suites: true, tests: true } }) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Properties' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-properties-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content'>\n      {active\n        ? <div>\n          <ToggleRow type='all' label='All' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n          <ToggleRow type='suites' label='Suites' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n          <ToggleRow type='tests' label='Tests' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n        </div>\n        : null}\n    </div>\n\n  </div>\n}\n","import fuzzy from 'fuzzy'\nimport merge from 'merge'\n\nconst toggleAllProperties = (state, payload, update, toggleType, suiteTesttoggleType) => {\n  update[toggleType] = state[toggleType]\n  update[toggleType][payload.type] = payload.active\n\n  if (payload.type === 'all') {\n    update[toggleType].suites = payload.active\n    update[toggleType].tests = payload.active\n  }\n\n  if (payload.type === 'all' || payload.type === 'suites') {\n    Object.values(update.currentSuites).forEach(suite => {\n      suite.properties[suiteTesttoggleType] = payload.active\n    })\n  }\n\n  if (payload.type === 'all' || payload.type === 'tests') {\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if ('properties' in test) {\n          test.properties[suiteTesttoggleType] = payload.active\n        }\n      })\n    })\n  }\n  return update\n}\n\nexport default (state, { type, payload }) => {\n  let update = {}\n  update.currentSuites = state.currentSuites\n\n  if (type === 'parse-suites') {\n    state = merge.recursive(true, {}, state)\n    state.suites = payload.suites\n    state.currentSuites = payload.suites\n\n    for (let status of ['all', 'passed', 'skipped', 'failure', 'error', 'unknown']) {\n      payload = state.testToggles[status];\n      console.log(payload);\n      Object.values(state.currentSuites).forEach(suite => {\n        Object.values(suite.tests).forEach(test => {\n          if (status === 'all') {\n            test.visible = payload.visible;\n            test.active = payload.expanded;\n            test.raw = payload.raw;\n          }\n          else if (status === test.status) {\n              test.visible = payload.visible;\n              test.active = payload.expanded;\n              test.raw = payload.raw;\n              console.log(payload.status);\n              console.log(test);\n          }\n          else if (typeof test.status === 'undefined' && status === 'unknown') {\n            test.visible = payload.visible;\n            test.active = payload.expanded;\n            test.raw = payload.raw;\n          }\n        })\n      })\n    }\n\n    update.currentSuites = state.currentSuites;\n\n    update = toggleAllProperties(state, { type: 'all', active: false }, update, 'propertiesVisible', '_visible');\n    state = merge.recursive(true, state, update)\n\n    Object.values(state.currentSuites).forEach(suite => { suite.active = state.suitesExpanded })\n    // state = merge.recursive(true, state, update);\n    // console.log(state);\n\n\n    Object.values(state.currentSuites).forEach(suite => {\n      if (!state.suitesEmpty) suite._visible = true\n      else suite._visible = (Object.keys(suite.tests).length > 0 && Object.values(suite.tests).filter(test => test.visible).length > 0) || (suite.properties._visible && Object.keys(suite.properties).filter(prop => prop !== '_visible').length > 0)\n    })\n\n    return state;\n  }\n\n  if (type === 'search-suites') {\n    Object.values(state.suites).forEach(({ name, id }) => {\n      if (fuzzy.test(payload.value.toLowerCase(), name.toLowerCase())) {\n        update.currentSuites[id] = update.currentSuites[id] || merge.recursive(true, {}, state.suites[id])\n        if (!('active' in update.currentSuites[id])) update.currentSuites[id].active = true\n      } else delete update.currentSuites[id]\n    })\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n  if (type === 'search-tests') {\n    Object.values(state.suites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (!fuzzy.test(payload.value.toLowerCase(), test.name.toLowerCase()) && !test.messages.some(message => fuzzy.test(payload.value.toLowerCase(), message.toLowerCase()))) {\n          if (update.currentSuites[suite.id]) delete update.currentSuites[suite.id].tests[test.id]\n        } else if (suite.id in update.currentSuites && !(test.id in update.currentSuites[suite.id].tests)) {\n          if (update.currentSuites[suite.id]) {\n            update.currentSuites[suite.id].tests[test.id] = merge.recursive(true, {}, state.suites[suite.id].tests[test.id])\n            update.currentSuites[suite.id].tests[test.id].active = true\n            update.currentSuites[suite.id].tests[test.id].visible = true\n            update.currentSuites[suite.id].tests[test.id].raw = true\n          }\n        }\n      })\n    })\n  }\n  if (type === 'search-properties') {\n    Object.values(state.suites).forEach(suite => {\n      Object.entries(suite.properties)\n        .filter(([key]) => key !== '_visible' && key !== '_active')\n        .forEach(([key, values]) => {\n          values = values || []\n          if (!fuzzy.test(payload.value.toLowerCase(), key.toLowerCase()) && !values.some(value => fuzzy.test(payload.value.toLowerCase(), value.toLowerCase()))) delete update.currentSuites[suite.id].properties[key]\n          else if (suite.id in update.currentSuites && !(key in update.currentSuites[suite.id].properties)) {\n            if (update.currentSuites[suite.id]) {\n              update.currentSuites[suite.id].properties[key] = [].concat(state.suites[suite.id].properties[key])\n              update.currentSuites[suite.id].properties._active = true\n              update.currentSuites[suite.id].properties._visible = true\n              update.propertiesExpanded = false\n            }\n          }\n        })\n    })\n    update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._active || false\n    })\n    update.propertiesVisible = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._visible || false\n    })\n  }\n\n  if (type === 'toggle-all-suites') {\n    update.suitesExpanded = !state.suitesExpanded\n    Object.values(update.currentSuites).forEach(suite => { suite.active = update.suitesExpanded })\n  }\n  if (type === 'toggle-empty-suites') {\n    update.suitesEmpty = !state.suitesEmpty\n  }\n  if (type === 'toggle-menu') update.menuActive = !state.menuActive\n  if (type === 'toggle-suite-options') update.suiteOptionsActive = !state.suiteOptionsActive\n  if (type === 'toggle-test-options') update.testOptionsActive = !state.testOptionsActive\n  if (type === 'toggle-properties-options') update.propertiesOptionsActive = !state.propertiesOptionsActive\n  if (type === 'toggle-files') update.activeFiles = !state.activeFiles\n  if (type === 'toggle-suite') {\n    update.currentSuites[payload.id].active = payload.active\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n\n  if (type === 'toggle-properties') {\n    if (typeof payload.test !== 'undefined' && payload.test !== null) {\n      update.currentSuites[payload.suite].tests[payload.test].properties._active = payload.active\n    } else {\n      update.currentSuites[payload.suite].properties._active = payload.active\n      update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n        return suite.properties._active || false\n      })\n    }\n  }\n\n  if (type === 'toggle-all-properties') {\n    update = toggleAllProperties(state, payload, update, 'propertiesExpanded', '_active')\n  }\n  if (type === 'toggle-properties-visbility') {\n    update = toggleAllProperties(state, payload, update, 'propertiesVisible', '_visible')\n  }\n\n  if (type === 'toggle-test') {\n    update.currentSuites[payload.suite].tests[payload.id].active = payload.active\n  }\n  if (type === 'toggle-test-mode') {\n    update.currentSuites[payload.suite].tests[payload.id].raw = payload.raw\n  }\n  if (type === 'toggle-test-visibility') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].visible = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.visible = payload.active\n        else if (payload.status === test.status) test.visible = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.visible = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.visible = payload.active\n      update.testToggles.failure.visible = payload.active\n      update.testToggles.error.visible = payload.active\n      update.testToggles.skipped.visible = payload.active\n      update.testToggles.unknown.visible = payload.active\n    } else {\n      if (update.testToggles.passed.visible ||\n            update.testToggles.failure.visible ||\n            update.testToggles.error.visible ||\n            update.testToggles.skipped.visible ||\n            update.testToggles.unknown.visible) update.testToggles.all.visible = true\n    }\n  }\n  if (type === 'toggle-test-expanded') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].expanded = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.active = payload.active\n        else if (payload.status === test.status) test.active = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.active = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.expanded = payload.active\n      update.testToggles.failure.expanded = payload.active\n      update.testToggles.error.expanded = payload.active\n      update.testToggles.skipped.expanded = payload.active\n      update.testToggles.unknown.expanded = payload.active\n    } else {\n      if (update.testToggles.passed.expanded ||\n            update.testToggles.failure.expanded ||\n            update.testToggles.error.expanded ||\n            update.testToggles.skipped.expanded ||\n            update.testToggles.unknown.expanded) update.testToggles.all.expanded = true\n    }\n  }\n  if (type === 'toggle-test-raw') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].raw = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.raw = payload.active\n        else if (payload.status === test.status) test.raw = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.raw = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.raw = payload.active\n      update.testToggles.failure.raw = payload.active\n      update.testToggles.error.raw = payload.active\n      update.testToggles.skipped.raw = payload.active\n      update.testToggles.unknown.raw = payload.active\n    } else {\n      if (update.testToggles.passed.raw ||\n            update.testToggles.failure.raw ||\n            update.testToggles.error.raw ||\n            update.testToggles.skipped.raw ||\n            update.testToggles.unknown.raw) update.testToggles.all.raw = true\n    }\n  }\n\n  state = merge.recursive(true, state, update)\n\n  Object.values(state.currentSuites).forEach(suite => {\n    if (!state.suitesEmpty) suite._visible = true\n    else suite._visible = (Object.keys(suite.tests).length > 0 && Object.values(suite.tests).filter(test => test.visible).length > 0) || (suite.properties._visible && Object.keys(suite.properties).filter(prop => prop !== '_visible').length > 0)\n  })\n\n  return state\n}\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst Properties = ({ properties, active = true, dispatch, suite, test = null }) => {\n  return <div className={`properties card is-${active ? 'active' : 'inactive'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-properties', payload: { suite, test, active: !active } }) }}>\n      <p className='card-header-title'>Properties</p>\n      <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span>\n    </button>\n    {active ? <div className='card-content'>\n      <table className='table'>\n        <thead>\n          <tr>\n            <th>Property</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(properties)\n            .filter(key => key !== '_active' && key !== '_visible')\n            .map(key => {\n              return <tr key={key}>\n                <td>{key}</td>\n                <td>{properties[key].join(', ')}</td>\n              </tr>\n            })}\n        </tbody>\n      </table>\n    </div> : null}\n  </div>\n}\n\nconst RawContent = ({ messages }) => <div className='raw-content'>\n  {messages.map((message, index) => <pre key={`test-message-${index}`}>{message}</pre>)}\n</div>\n\nconst PrettyContent = ({ messages }) => <div className='pretty-content'>\n  {messages.map((message, index) => <div key={`test-message-${index}`} dangerouslySetInnerHTML={{ __html: message }} />)}\n</div>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst Test = ({ id, messages, status, time, classname, name, properties = {}, active = true, raw = true, dispatch, suite }) => {\n  const hasProperties = properties._visible & Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const hasMessage = messages.length > 0\n  return <div className={`test card is-${active ? 'active' : 'inactive'} is-${status} is-${!hasMessage && !hasProperties ? 'empty' : 'populated'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-test', payload: { suite, id, active: !active } }) }} disabled={!hasMessage && !hasProperties}>\n      <p className='card-header-title'>\n        <span className='icon'>\n          <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n        </span>\n        <span>{name}</span>\n        {classname ? <small>classname = {classname}</small> : null}\n        {time ? <small>time = {time}</small> : null}\n      </p>\n      {hasMessage || hasProperties ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span> : null}\n    </button>\n    <div className='content'>\n      {active && (hasMessage || hasProperties) ? <div className='card-content'>\n        {hasProperties ? <Properties properties={properties} suite={suite} test={id} dispatch={dispatch} active={properties._active} /> : null}\n        {\n          hasMessage\n            ? <>\n              <Toggle\n                active={raw}\n                onLabel='raw'\n                onIcon={<CodeIcon />}\n                offIcon={<PrettyIcon />}\n                offLabel='pretty'\n                onChange={() => dispatch({ type: 'toggle-test-mode', payload: { suite, id, raw: !raw } })} />\n              {\n                raw\n                  ? <RawContent messages={messages} />\n                  : <PrettyContent messages={messages} />\n              }\n            </>\n            : null\n        }\n      </div> : null}\n    </div>\n  </div>\n}\n\nconst SuiteCount = ({ count, type }) => count > 0 ? <span className='suite-count'>\n  <span className='icon'>\n    <i className={`fas fa-${icons[type]}`} aria-hidden='true' />\n  </span>\n  {count}\n</span> : null\n\nconst Suite = ({ visible, id, name, active = false, properties = {}, time, tests = {}, dispatch, systemOut = [] }) => {\n  let passed = 0\n  let failure = 0\n  let skipped = 0\n  let error = 0\n  let unknown = 0\n  Object.keys(tests).forEach(key => {\n    const status = tests[key].status\n    if (status === 'passed') passed += 1\n    else if (status === 'failure') failure += 1\n    else if (status === 'skipped') skipped += 1\n    else if (status === 'error') error += 1\n    else unknown += 1\n  })\n\n  const hasTests = Object.keys(tests).length > 0 && Object.values(tests).some(test => test.visible)\n  const hasProperties = '_visible' in properties && properties._visible && Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const containsSomething = hasTests || hasProperties\n  return <div className={`card suite is-${active ? 'active' : 'inactive'} is-${containsSomething ? 'populated' : 'empty'} is-${visible ? 'visible' : 'hidden'}`}>\n    <button className='card-header' onClick={() => { if (containsSomething) dispatch({ type: 'toggle-suite', payload: { id, active: !active } }) }} disabled={!containsSomething}>\n      <p className='card-header-title'>\n        <span>{name}</span>\n        {time ? <small>time = {time}</small> : null}\n      </p>\n\n      {containsSomething ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span> : null}\n      {containsSomething ? <p className='suite-count-container'>\n        <SuiteCount type='failure' count={failure} />\n        <SuiteCount type='error' count={error} />\n        <SuiteCount type='passed' count={passed} />\n        <SuiteCount type='skipped' count={skipped} />\n        <SuiteCount type='unknown' count={unknown} />\n      </p> : null}\n    </button>\n    {active && containsSomething ? <div className='card-content'>\n      <div className='content'>\n        {systemOut.length > 0 ? systemOut.map((value, index) => <pre key={`${id}-sysout-${index}`}>{value}</pre>) : null}\n        {hasProperties ? <Properties properties={properties} suite={id} dispatch={dispatch} active={properties._active} /> : null}\n        <div>\n          {Object.keys(tests)\n            .filter((key) => {\n              return tests[key].visible && (tests[key].status === 'passed' || tests[key].status === 'error' || tests[key].status === 'failure')\n            }).sort(function(a,b){\n              try {\n                return new Date(JSON.parse(tests[a].messages[0]).start) - new Date(JSON.parse(tests[b].messages[0]).start);\n\n              } catch (err) {\n                console.error(err);\n                console.error(tests[b].messages[0]);\n                console.error(tests[a].messages[0]);\n                return -1;\n              }\n            })\n            .map(key => <Test key={key} {...tests[key]} suite={id} dispatch={dispatch} />)}\n          {Object.keys(tests)\n            .filter((key) => tests[key].visible && tests[key].status === 'skipped')\n            .map(key => <Test key={key} {...tests[key]} suite={id} dispatch={dispatch} />)}\n          {Object.keys(tests)\n            .filter((key) => tests[key].visible && !['failure', 'error', 'passed', 'skipped'].includes(tests[key].status))\n            .map(key => <Test key={key} {...tests[key]} suite={id} dispatch={dispatch} />)}\n        </div>\n      </div>\n    </div> : null}\n  </div>\n}\n\nexport default Suite\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst Search = ({ label, dispatch }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-suites',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total }) => <div className='options-total'>\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst HideIcon = () => <span className='icon'>\n  <i className='far fa-eye-slash' />\n</span>\n\nconst ShowIcon = () => <span className='icon'>\n  <i className='far fa-eye' />\n</span>\n\nexport default ({ suitesExpanded = true, suitesEmpty = true, count = 0, total = 0, dispatch, active = false }) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Suites' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-suite-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content options-toggles'>\n      {active\n        ? <>\n          <Toggle\n            onChange={() => dispatch({ type: 'toggle-all-suites' })}\n            active={suitesExpanded}\n            onLabel='Expanded'\n            offLabel='Contracted'\n            offIcon={<ChevronUpIcon />}\n            onIcon={<ChevronDownIcon />} />\n          <Toggle\n            onChange={() => dispatch({ type: 'toggle-empty-suites' })}\n            active={suitesEmpty}\n            onLabel='Empty hidden'\n            offLabel='Empty shown'\n            onIcon={<HideIcon />}\n            offIcon={<ShowIcon />} />\n        </>\n        : null}\n    </div>\n\n  </div>\n}\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst Search = ({ label, dispatch, suite, id }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-tests',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total, icon }) => <div className='options-total'>\n  {icon\n    ? <span className='icon'>\n      <i className={`fas fa-${icons[icon] || icons.unknown}`} aria-hidden='true' />\n    </span>\n    : null}\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst fromTestCounts = (testCounts, status, value) => {\n  const statusCounts = testCounts[status] || {}\n  return statusCounts[value] || 0\n}\n\nconst EyeIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye' />\n  </span>\n</>\n\nconst EyeSlashIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye-slash' />\n  </span>\n</>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst StatusTotal = ({ testCounts, status }) => {\n  return fromTestCounts(testCounts, status, 'total') > 0 ? <Total count={fromTestCounts(testCounts, status, 'count')} total={fromTestCounts(testCounts, status, 'total')} icon={status} /> : null\n}\n\nconst ToggleRow = ({ status, label, dispatch, visible = true, expanded = true, raw = true }) => <div className='test-options-toggle-row'>\n  <div className='test-options-toggle-row-label'>\n    {status !== 'all'\n      ? <span className='icon'>\n        <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n      </span>\n      : <span className='icon'>\n        <i className='far fa-circle' aria-hidden='true' />\n      </span>}\n    <span>{label}</span>\n  </div>\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-visibility',\n        payload: {\n          status,\n          active: !visible\n        }\n      })\n    }}\n    active={visible}\n    onLabel='Visible'\n    offLabel='Hidden'\n    onIcon={<EyeIcon />}\n    offIcon={<EyeSlashIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-expanded',\n        payload: {\n          status,\n          active: !expanded\n        }\n      })\n    }}\n    active={expanded}\n    onLabel='Expanded'\n    offLabel='Contracted'\n    onIcon={<ChevronDownIcon />}\n    offIcon={<ChevronUpIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-raw',\n        payload: {\n          status,\n          active: !raw\n        }\n      })\n    }}\n    active={raw}\n    onLabel='Raw'\n    offLabel='Pretty'\n    onIcon={<CodeIcon />}\n    offIcon={<PrettyIcon />} />\n\n</div>\n\nconst Options = ({\n  testCounts = {},\n  testToggles = {},\n  count = 0,\n  total = 0,\n  dispatch,\n  active = false\n}) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Tests' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-test-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n          <StatusTotal testCounts={testCounts} status='passed' />\n          <StatusTotal testCounts={testCounts} status='failure' />\n          <StatusTotal testCounts={testCounts} status='error' />\n          <StatusTotal testCounts={testCounts} status='skipped' />\n          <StatusTotal testCounts={testCounts} status='unknown' />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content options-toggles'>\n      {active\n        ? <>\n          <ToggleRow status='all' label='All' dispatch={dispatch} {...testToggles.all} />\n          <ToggleRow status='passed' label='Passed' dispatch={dispatch} {...testToggles.passed} />\n          <ToggleRow status='failure' label='Failure' dispatch={dispatch} {...testToggles.failure} />\n          <ToggleRow status='error' label='Error' dispatch={dispatch} {...testToggles.error} />\n          <ToggleRow status='skipped' label='Skipped' dispatch={dispatch} {...testToggles.skipped} />\n          <ToggleRow status='unknown' label='Unknown' dispatch={dispatch} {...testToggles.unknown} />\n        </>\n        : null}\n    </div>\n\n  </div>\n}\n\nexport default Options\n","import React, { useEffect, useReducer } from 'react'\nimport Files from './files'\nimport Hero from './hero'\nimport initialState from './initial-state.json'\nimport parseAll from './parse-all'\nimport PropertiesOptions from './properties-options'\nimport reducer from './reducer'\nimport Suite from './suite'\nimport SuiteOptions from './suite-options'\nimport TestOptions from './test-options'\n\nconst App = ({ files, title, brand }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  if (Object.keys(state.suites).length === 0) parseAll(dispatch, files, {})\n\n  let currentPropertiesCount = 0\n  let propertiesTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    currentPropertiesCount += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) currentPropertiesCount += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    propertiesTotal += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) propertiesTotal += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n\n  const testCounts = {}\n  let testCount = 0\n  let testTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    Object.entries(suite.tests).forEach(([key, test]) => {\n      const status = test.status || 'unknown'\n      testCounts[status] = testCounts[status] || {}\n      testCounts[status].count = testCounts[status].count || 0\n      testCounts[status].total = testCounts[status].total || 0\n\n      testCounts[status].count += 1\n      testCounts[status].total += 1\n\n      testTotal += 1\n      testCount += 1\n    })\n  })\n\n  const onUpdate = ({ files }) => {\n    parseAll(dispatch, files, {})\n  }\n\n  window.sockets = window.sockets || null\n  useEffect(() => {\n    if (window.sockets === null && 'io' in window) {\n      window.sockets = window.io()\n      window.sockets.on('update', onUpdate)\n    }\n  })\n\n  return <div>\n    <Hero active={state.menuActive} onClick={() => { dispatch({ type: 'toggle-menu' }) }} title={title} brand={brand} />\n    <header className={`is-${!state.menuActive ? 'hidden' : 'shown'}`}>\n      <div className='container'>\n        <SuiteOptions\n          active={state.suiteOptionsActive}\n          suitesExpanded={state.suitesExpanded}\n          suitesEmpty={state.suitesEmpty}\n          dispatch={dispatch}\n          count={Object.keys(state.currentSuites).length}\n          total={Object.keys(state.suites).length}\n        />\n        <TestOptions\n          active={state.testOptionsActive}\n          testToggles={state.testToggles}\n          testCounts={testCounts}\n          count={testCount}\n          total={testTotal}\n          dispatch={dispatch}\n        />\n        <PropertiesOptions\n          propertiesExpanded={state.propertiesExpanded}\n          propertiesVisible={state.propertiesVisible}\n          active={state.propertiesOptionsActive}\n          count={currentPropertiesCount}\n          total={propertiesTotal}\n          dispatch={dispatch}\n        />\n        {process.env.NODE_ENV === 'development'\n          ? <Files files={files} active={state.activeFiles} setActive={() => { dispatch({ type: 'toggle-files' }) }} />\n          : null}\n      </div>\n    </header>\n    <main>\n      <div className='container'>\n        <div>\n          {Object.values(state.currentSuites).map(suite => <Suite key={suite.id} {...suite} visible={suite._visible} dispatch={dispatch} />)}\n        </div>\n      </div>\n    </main>\n  </div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport '@fortawesome/fontawesome-free/js/all'\n\nimport './app/index.css'\nimport App from './app/app.js'\n\nimport LZUTF8 from 'lzutf8'\n\nlet files = window.files || []\nconst title = window.title || 'Xunit Viewer'\nconst brand = window.brand || null\n\nif (process.env.NODE_ENV === 'development') {\n  files = [{\n    file: '/path/to/file/complete.xml',\n    contents: LZUTF8.compress(`\n    <?xml version=\"1.0\"?>\n<testsuites>\n    <testsuite name=\"CodeceptionSupport.acceptance\" tests=\"43\" assertions=\"1348\" failures=\"4\" errors=\"7\"\n               time=\"3167.404369\">\n        <testcase file=\"/usr/share/nginx/html/tests/acceptance/Bets/GuestBrowsingBetViewPageCest.php\"\n                  name=\"assertBetViewPage\" class=\"CodeceptionAcceptanceBetsGuestBrowsingBetViewPageCest\"\n                  feature=\"assert bet view page\" assertions=\"42\" time=\"78.914764\"/>\n        <testcase file=\"/usr/share/nginx/html/tests/acceptance/Bets/GuestBrowsingProphetBetsPageCest.php\"\n                  name=\"navigateAndCheckTest\" class=\"CodeceptionAcceptanceBetsGuestBrowsingProphetBetsPageCest\"\n                  feature=\"navigate and check test\" assertions=\"2\" time=\"19.616513\">\n            <failure type=\"PHPUnitFrameworkExpectationFailedException\">GuestBrowsingProphetBetsPageCest: Navigate and\n                check test\n                Failed asserting that two strings are equal.\n                /usr/share/nginx/html/tests/_support/_generated/AcceptanceTesterActions.php:768\n                /usr/share/nginx/html/tests/_support/Step/Prophet.php:50\n                /usr/share/nginx/html/tests/acceptance/Bets/GuestBrowsingProphetBetsPageCest.php:49\n            </failure>\n        </testcase>\n        <testcase\n                file=\"/usr/share/nginx/html/tests/acceptance/Prophecies/GuestBrowsingProphetOfferedPropheciesPageCest.php\"\n                name=\"navigateAndCheckTest\"\n                class=\"CodeceptionAcceptanceBetsGuestBrowsingProphetOfferedPropheciesPageCest\"\n                feature=\"navigate and check test\" assertions=\"4\" time=\"50.317909\">\n            <failure type=\"CodeceptionExceptionElementNotFound\">GuestBrowsingProphetOfferedPropheciesPageCest:\n                Navigate and check test\n                Element located either by name, CSS or XPath element with '#twoLevelTabsMenu' was not found.\n                /usr/share/nginx/html/tests/_support/_generated/AcceptanceTesterActions.php:334\n                /usr/share/nginx/html/tests/_support/AcceptanceTester.php:346\n                /usr/share/nginx/html/tests/_support/Page/Element/UserProfileMenu.php:204\n                /usr/share/nginx/html/tests/_support/Page/Element/UserProfileMenu.php:298\n                /usr/share/nginx/html/tests/acceptance/Prophecies/GuestBrowsingProphetOfferedPropheciesPageCest.php:54\n            </failure>\n        </testcase>\n    </testsuite>\n</testsuites>\n\n\n`, { outputEncoding: 'Base64' })\n  }]\n}\n\nfiles = files.map(({ file, contents }) => ({\n  file,\n  contents: LZUTF8.decompress(contents, { inputEncoding: 'Base64' })\n}))\n\nReactDOM.render(<App files={files} title={title} brand={brand} />, document.getElementById('root'))\n","const xml2js = require('xml2js')\n\nconst parseString = (xml) => new Promise((resolve, reject) => {\n  xml2js.parseString(xml, (err, result) => {\n    if (err) reject(new Error(err))\n    else resolve(result)\n  })\n})\n\nconst hashCode = (str) => {\n  var hash = 0\n  if (str.length === 0) return hash\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i)\n    hash = ((hash << 5) - hash) + char\n    hash = hash & hash\n  }\n  return hash\n}\n\nconst extarctSuiteMeta = (output, testsuite) => {\n  const meta = testsuite.$ || {}\n  const name = meta.name || 'No Name'\n  const id = hashCode(name)\n  const suite = output.suites[id] || {}\n  suite.tests = suite.tests || {}\n  suite.systemOut = suite.systemOut || []\n  suite.properties = suite.properties || {\n    _visible: true\n  }\n\n  Object.entries(meta).forEach(([key, value]) => {\n    if (!['errors', 'failures', 'name', 'skipped', 'tests', 'time'].includes(key)) {\n      suite.properties[key] = suite.properties[key] || []\n      suite.properties[key].push(value)\n    }\n  })\n\n  suite.id = id\n  suite.name = name\n  suite.time = meta.time || 0\n  return suite\n}\n\nconst extractProperties = (suite, properties) => {\n  suite.properties = suite.properties || {}\n  suite.properties._visible = true\n  properties.forEach(property => {\n    if (typeof property === 'string') {\n      property = property.trim()\n      if (property !== '') {\n        suite.properties['No Name'] = suite.properties['No Name'] || []\n        suite.properties['No Name'].push(property)\n      }\n    } else {\n      property.property.forEach(property => {\n        const meta = property.$ || {}\n        const name = meta.name || 'No Name'\n        let value = meta.value || property._\n        if (typeof property === 'string') value = property\n        value = value || ''\n        value = value.trim()\n        suite.properties[name] = suite.properties[name] || []\n        if (value) {\n          suite.properties[name].push(value)\n        }\n      })\n    }\n  })\n}\n\nconst extractTestMessages = (test, messages) => {\n  messages.forEach(body => {\n    const is_ = typeof body._ === 'string'\n    const is$Message = typeof body.$ !== 'undefined' && ('message' in body.$)\n    const is$Type = typeof body.$ !== 'undefined' && ('type' in body.$)\n    const isString = typeof body === 'string'\n\n    if (is_) test.messages.push(body._.trim())\n    if (is$Message) test.messages.push(body.$.message.trim())\n    if (is$Type) test.messages.push(body.$.type.trim())\n    if (isString) test.messages.push(body.trim())\n  })\n}\n\n\nconst extractTests = (output, suite, testcases) => {\n  suite.tests = suite.tests || {}\n  let counter = 0;\n  testcases.forEach(testcase => {\n    const meta = testcase.$ || {}\n    const name = meta.name || 'No Name'\n    const classname = meta.classname || meta.class || ''\n    const time = meta.time || 0\n    const id = hashCode(name + classname + counter);\n    counter++;\n\n    const test = suite.tests[id] || { id, name, messages: [], visible: true }\n    test.time = time\n    test.classname = classname\n    if (typeof testcase === 'string') test.messages.push(testcase.trim())\n    if (testcase._) test.messages.push(testcase._.trim())\n    if (meta.message) test.messages.push(testcase.$.message.trim())\n    if (typeof testcase.properties !== 'undefined') {\n      extractProperties(test, testcase.properties)\n      delete testcase.properties\n    }\n    const clonedMeta = Object.assign({}, meta)\n    delete clonedMeta.time\n    delete clonedMeta.name\n    delete clonedMeta.classname\n    delete clonedMeta.class\n    delete clonedMeta.message\n    if (Object.keys(clonedMeta).length > 0) {\n      const property = []\n      for (const [name, value] of Object.entries(clonedMeta)) {\n        property.push({\n          $: {\n            name, value\n          }\n        })\n      }\n      extractProperties(test, [{ property }])\n    }\n\n    if (typeof testcase !== 'string') {\n      const keys = Object.keys(testcase).filter(key => key !== '$' && key !== '_' && key !== 'testcase')\n      let status = keys[0]\n      keys.forEach((key) => {\n        if (key) extractTestMessages(test, testcase[key])\n      })\n      if (status === 'system-out') status = 'passed'\n      test.status = status || 'passed'\n    }\n\n    test.messages = test.messages.filter(message => message !== '')\n\n    suite.tests[id] = test\n    if (typeof testcase.testcase !== 'undefined') extractTests(output, suite, testcase.testcase)\n    if (typeof testcase.testsuite !== 'undefined') extractSuite(output, testcase.testsuite)\n  })\n}\n\nconst extractSystemOut = (suite, testsuite) => {\n  suite.systemOut = suite.systemOut || []\n  let systemOut = testsuite['system-out']\n  if (!Array.isArray(systemOut)) systemOut = [systemOut]\n  suite.systemOut = suite.systemOut.concat(systemOut)\n}\n\nconst extractSuite = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    const suite = extarctSuiteMeta(output, testsuite)\n    if (typeof testsuite.properties !== 'undefined') extractProperties(suite, testsuite.properties)\n    if (typeof testsuite.testcase !== 'undefined') extractTests(output, suite, testsuite.testcase)\n    if (typeof testsuite['system-out'] !== 'undefined') extractSystemOut(suite, testsuite)\n    output.suites[suite.id] = suite\n  })\n}\n\nconst extract = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    extractSuite(output, testsuite)\n    if (typeof testsuite.testsuite !== 'undefined') extract(output, testsuite.testsuite)\n  })\n}\n\nconst parse = async (xml) => {\n  const output = {\n    suites: {}\n  }\n  const result = await parseString(xml)\n  if (result.testsuites) {\n    const testsuites = result.testsuites.testsuite\n    extract(output, testsuites)\n  } else if (result.testsuite) {\n    extract(output, result.testsuite)\n  }\n\n  for (const value of Object.values(output.suites)) {\n    value._visible = Object.keys(value.tests).length > 0 || Object.keys(value.properties).filter(prop => prop !== '_visible').length > 0\n    value.systemOut = value.systemOut.map(value => value.trim())\n  }\n  return output\n}\n\nif (typeof window !== 'undefined') window.parse = parse\nelse {\n  module.exports = parse\n}\n"],"sourceRoot":""}